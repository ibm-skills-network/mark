// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This enum represents the types of assignments
enum AssignmentType {
  AI_GRADED         /// The assignment is graded by an AI
  MANUAL            /// The assignment is manually graded by a human
}

/// This enum defines the order in which assignments are displayed
enum AssignmentQuestionDisplayOrder {
  DEFINED           /// The assignments are displayed in a predefined order
  RANDOM            /// The assignments are displayed in a random order
}

/// This enum represents the types of questions that can be part of an assignment
enum QuestionType {
  TEXT                  /// The question requires a text response
  SINGLE_CORRECT        /// The question has multiple choices, only one of which is correct
  MULTIPLE_CORRECT      /// The question has multiple choices, more than one of which can be correct
  TRUE_FALSE            /// The question requires a True/False response
  URL                   /// The question requires a URL response
  UPLOAD                /// The question requires the upload of a file as a response
}

/// This enum represents the ways in which an assignment can be scored
enum ScoringType {
  CRITERIA_BASED       /// The assignment is scored based on specifying one or more criterias
  LOSS_PER_MISTAKE     /// Points are deducted for each mistake in the assignment
  AI_GRADED            /// The assignment is graded by an AI
}

/// The Group model represents a particular group of assignments (having the same groupID)
model Group {
  id          String         @unique      /// Unique ID of the course
  assignments AssignmentGroup[]           /// The list of assignments associated with this group
}

/// The AssignmentGroup model represents the many-to-many relationship between Assignments and Groups
model AssignmentGroup {
  assignment       Assignment     @relation(fields: [assignmentId], references: [id])     /// The associated Assignment model
  assignmentId     Int                                                                    /// Relation scalar field  (used in the `@relation` attribute above)
  group            Group @relation(fields: [groupId], references: [id])                   /// The associated Group model
  groupId          String                                                                 /// Relation scalar field  (used in the `@relation` attribute above)
  @@id([assignmentId, groupId])                                                           /// Unique identifier for the relationship
}

/// The Assignment model represents a particular assignment
model Assignment {
  id              Int                     @id @default(autoincrement())         /// Unique identifier for the assignment
  name            String                                                        /// Name of the assignment
  introduction    String?                                                       /// Introduction Paragraph for the assignment
  instructions    String?                                                       /// Instructions for the assignment
  gradingCriteriaOverview    String?                                            /// Grading Criteria for the assignment
  type            AssignmentType                                                /// Type of assignment
  graded          Boolean?                                                      /// Is the assignment graded or not
  numAttempts     Int?                                                          /// Max number of times a learner can attempt the assignment
  allotedTimeMinutes        Int?                                                /// Time allotted to complete the assignment in minutes
  attemptsPerTimeRange      Int?                                                /// Number of allowed attempts within the specified time range.
  attemptsTimeRangeHours    Int?                                                /// Time range, in hours, over which the attempts are counted.
  passingGrade    Int?                                                          /// The minimum grade required to pass the assignment
  displayOrder    AssignmentQuestionDisplayOrder?                               /// The order in which the assignment is displayed
  questions       Question[]                                                    /// The list of questions in the assignment
  groups          AssignmentGroup[]                                             /// List of groups associated with the assignment
}

/// The Question model represents a question in an assignment
model Question {
  id           Int          @id @default(autoincrement())         /// Unique identifier for the question
  totalPoints  Int                                                /// Total points that can be scored for the question
  numRetries   Int?                                               /// Max number of times a student can retry a question
  type         QuestionType                                       /// Type of question
  question     String                                             /// The text of the question
  maxWords     Int?                                               /// optional maximum number of words allowed for a written response type question
  scoring      Json?                                              /// Scoring details for the question, stored as JSON
  choices      Json?                                              /// Possible choices for the question, stored as JSON
  answer       Boolean?                                           /// The correct answer for the question (used for auto grading)
  assignmentId Int                                                /// The ID of the assignment to which the question belongs
  assignment   Assignment   @relation(fields: [assignmentId], references: [id])   /// The assignment to which the question belongs
}

/// This model represents an assignment attempt by a learner
model AssignmentAttempt {
  id                Int                @id @default(autoincrement())         /// Unique identifier for the assignment attempt
  assignmentId      Int                                                      /// The ID of the assignment that has been submitted
  userId            String                                                   /// The id of the user who created this attempt
  questionResponses QuestionResponse[]                                       /// The responses provided by the leaner for each question in the assignment (each question can have multiple responses if the question allows for)
  submitted         Boolean                                                  /// Boolean value representing if the attempt is submitted by the learner or not
  grade             Float?                                                   /// The overall LTI grade value (from 0.0 - 1.0) that the learner earned
  expiresAt         DateTime?                                                /// The DateTime at which the attempt window ends (can no longer submit it)
  createdAt         DateTime @default(now())
}

/// This model represents a student's response to a question
model QuestionResponse {
  id                     Int                  @id @default(autoincrement())       /// Unique identifier for the question response
  assignmentAttemptId    Int                                                      /// The ID of the assignment attempt that includes this response
  assignmentAttempt      AssignmentAttempt @relation(fields: [assignmentAttemptId], references: [id])   /// The assignment attempt that includes this response
  questionId             Int                                                      /// The ID of the question to which the student is responding
  learnerResponse        String                                                   /// The student's response to the question
  points                 Int                                                      /// The points earned by the student for this response
  feedback               Json                                                     /// Feedback on the student's response, stored as JSON
}
