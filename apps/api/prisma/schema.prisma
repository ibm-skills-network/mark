// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This enum represents the types of assignments
// AI_GRADED: The assignment is graded by an AI
// MANUAL: The assignment is manually graded by a human
enum AssignmentType {
  AI_GRADED
  MANUAL
}

// This enum defines the order in which assignments are displayed
// DEFINED: The assignments are displayed in a predefined order
// RANDOM: The assignments are displayed in a random order
enum AssignmentDisplayOrder {
  DEFINED
  RANDOM
}

// This enum represents the types of questions that can be part of an assignment
// TEXT: The question requires a text response
// SINGLE_CORRECT: The question has multiple choices, only one of which is correct
// MULTIPLE_CORRECT: The question has multiple choices, more than one of which can be correct
// TRUE_FALSE: The question requires a True/False response
// URL: The question requires a URL response
// UPLOAD: The question requires the upload of a file as a response
enum QuestionType {
  TEXT
  SINGLE_CORRECT
  MULTIPLE_CORRECT
  TRUE_FALSE
  URL
  UPLOAD
}

// This enum represents the ways in which an assignment can be scored
// SINGLE_CRITERIA: The assignment is scored based on a single criteria
// MULTIPLE_CRITERIA: The assignment is scored based on multiple criteria
// LOSS_PER_MISTAKE: Points are deducted for each mistake in the assignment
// AI_GRADED: The assignment is graded by an AI
enum ScoringType {
  SINGLE_CRITERIA
  MULTIPLE_CRITERIA
  LOSS_PER_MISTAKE
  AI_GRADED
}

// The Group model represents a particular group of users (having the same groupID)
// id: Unique identifier for the group
// name: Name of the group
// assignments: The list of assignments associated with this group
model Group {
  id          String         @unique
  assignments AssignmentGroup[]
}

// The AssignmentGroup model represents the many-to-many relationship
// between Assignments and Groups
// id: Unique identifier for the relationship
// assignmentId: The ID of the associated assignment
// groupId: The ID of the associated group
// assignment: The associated Assignment model
// group: The associated Group model
model AssignmentGroup {
  assignment       Assignment     @relation(fields: [assignmentId], references: [id])
  assignmentId     Int
  group            Group @relation(fields: [groupId], references: [id])
  groupId          String
  @@id([assignmentId, groupId])
}

// The Assignment model represents a particular assignment
// id: Unique identifier for the assignment
// name: Name of the assignment
// type: Type of assignment
// numAttempts: Max number of times a learner can attempt the assignment
// allotedTime: Time allotted to complete the assignment in minutes
// passingGrade: The minimum grade required to pass the assignment
// displayOrder: The order in which the assignment is displayed
// questions: The list of questions in the assignment
model Assignment {
  id              Int                     @id @default(autoincrement())
  name            String
  type            AssignmentType
  numAttempts     Int?
  allotedTime     Int?
  passingGrade    Int?
  displayOrder    AssignmentDisplayOrder?
  questions       Question[]
  groups          AssignmentGroup[]
}

// The Question model represents a question in an assignment
// id: Unique identifier for the question
// totalPoints: Total points that can be scored for the question
// numRetries: Max number of times a student can retry a question
// type: Type of question
// question: The text of the question
// scoring: Scoring details for the question, stored as JSON
// choices: Possible choices for the question, stored as JSON
// answer: The correct answer for the question (used for auto grading)
// assignmentId: The ID of the assignment to which the question belongs
// assignment: The assignment to which the question belongs
model Question {
  id           Int          @id @default(autoincrement())
  totalPoints  Int
  numRetries   Int
  type         QuestionType
  question     String
  scoring      Json?
  choices      Json?
  answer       Boolean?
  assignmentId Int
  assignment   Assignment   @relation(fields: [assignmentId], references: [id])
}

// This model represents an assignment submission by a learner
// id: Unique identifier for the assignment submission
// assignmentId: The ID of the assignment that has been submitted
// questionResponses: The responses provided by the leaner for each question in the assignment (each question can have multiple responses if the question allows for)
// submitted: Boolean value representing if the submission is submitted by the learner or not
// grade: The overall LTI grade value (from 0.0 - 1.0) that the learner earned 
// userId: The id of the user who created this submission
// expiry: The DateTime at which the submission window ends (can no longer submit it)
model AssignmentSubmission {
  id                Int                @id @default(autoincrement())
  assignmentId      Int
  userId            String
  questionResponses QuestionResponse[]
  submitted         Boolean
  grade             Float?
  expiry            DateTime?
}

// This model represents a student's response to a question
// id: Unique identifier for the question response
// assignmentSubmissionId: The ID of the assignment submission that includes this response
// assignmentSubmission: The assignment submission that includes this response
// questionId: The ID of the question to which the student is responding
// learnerResponse: The student's response to the question
// points: The points earned by the student for this response
// feedback: Feedback on the student's response, stored as JSON
model QuestionResponse {
  id                     Int                  @id @default(autoincrement())
  assignmentSubmissionId Int
  assignmentSubmission   AssignmentSubmission @relation(fields: [assignmentSubmissionId], references: [id])
  questionId             Int
  learnerResponse        String
  points                 Int
  feedback               Json
}
