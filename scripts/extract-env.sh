#!/usr/bin/env bash
set -euo pipefail

# ------------------------------- #
#  Helper – usage                 #
# ------------------------------- #
usage() {
  echo "Usage: $0 --input path/to/dev.env --output path/to/dev.env.generated"
  exit 1
}

# ------------------------------- #
#  Parse CLI flags                #
# ------------------------------- #
INPUT_FILE=""
OUTPUT_FILE=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -i|--input)  INPUT_FILE="$2"; shift 2 ;;
    -o|--output) OUTPUT_FILE="$2"; shift 2 ;;
    *) echo "❌ Unknown argument: $1"; usage ;;
  esac
done

[[ -z "$INPUT_FILE" || -z "$OUTPUT_FILE" ]] && usage
[[ ! -f "$INPUT_FILE" ]] && { echo "❌ Input file not found: $INPUT_FILE"; exit 1; }

# ------------------------------- #
#  Start generating file          #
# ------------------------------- #
echo "# AUTOGENERATED: DO NOT COMMIT THIS FILE" > "$OUTPUT_FILE"

# Enable Perl-style regex capture
shopt -s extglob

while IFS='' read -r line || [[ -n $line ]]; do

  # Pass through blank lines verbatim
  [[ -z "$line" ]] && { echo >> "$OUTPUT_FILE"; continue; }

  # Match: export VAR=whatever
  if [[ "$line" =~ ^[[:space:]]*export[[:space:]]+([A-Za-z_][A-Za-z0-9_]*)=(.*)$ ]]; then
    var_name="${BASH_REMATCH[1]}"
    raw_value="${BASH_REMATCH[2]}"

    # Strip any inline comment (first unescaped '#')
    raw_value="${raw_value%%#*}"

    # Trim leading/trailing whitespace
    raw_value="${raw_value##+([[:space:]])}"
    raw_value="${raw_value%%+([[:space:]])}"

    # Remove surrounding single OR double quotes
    if [[ "$raw_value" =~ ^\"(.*)\"$ ]]; then
      raw_value="${BASH_REMATCH[1]}"
    elif [[ "$raw_value" =~ ^\'(.*)\'$ ]]; then
      raw_value="${BASH_REMATCH[1]}"
    fi

    # 1Password look-up?
    if [[ "$raw_value" == op://* ]]; then
      echo "🔐 Fetching $var_name from 1Password…"
      if secret_value=$(op read "$raw_value" 2>/dev/null); then
        final_value="$secret_value"
      else
        final_value="<ERROR_FETCHING>"
      fi
    else
      final_value="$raw_value"
    fi

    printf 'export %s="%s"\n' "$var_name" "$final_value" >> "$OUTPUT_FILE"
  else
    # Non-export line → copy verbatim
    echo "$line" >> "$OUTPUT_FILE"
  fi
done < "$INPUT_FILE"

echo "✅ Done – secrets written to $OUTPUT_FILE"
